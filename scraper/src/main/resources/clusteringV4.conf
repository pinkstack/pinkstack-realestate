akka {
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  ## log-config-on-start = on

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO" # "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  http {
    client {
      idle-timeout = 120s
    }
    host-connection-pool {
      idle-timeout = 200s
    }
  }

  actor {
    provider = "cluster"
  }

  remote {
    log-remote-lifecycle-events = off
    artery.enabled = on
    artery.canonical.hostname = "127.0.0.1"
    artery.canonical.port = 0
  }

  cluster {
    seed-nodes = [
      "akka://AppV4@127.0.0.1:4000",
      "akka://AppV4@127.0.0.1:4001",
    ]
    auto-down-unreachable-after = 10s
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  coordinated-shutdown.exit-jvm = on
  coordinated-shutdown.terminate-actor-system = on
  cluster.shutdown-after-unsuccessful-join-seed-nodes = 20s
}