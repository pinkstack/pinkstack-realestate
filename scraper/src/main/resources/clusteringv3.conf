akka {
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  ## log-config-on-start = on

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG" # "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  http {
    client {
      idle-timeout = 120s
    }
    host-connection-pool {
      idle-timeout = 200s
    }
  }

  actor {
    provider = "cluster"
  }

  remote {
    log-remote-lifecycle-events = off
    artery.enabled = on

    artery {
      canonical.hostname = "localhost"
      canonical.port = 0
      canonical.port = ${?C_PORT}
    }
  }

  cluster {
    seed-nodes = [
      "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port},
    ]
    auto-down-unreachable-after = 10s
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  coordinated-shutdown.exit-jvm = on
  coordinated-shutdown.terminate-actor-system = on

  cluster.shutdown-after-unsuccessful-join-seed-nodes = 20s
}

http {
  ip = 127.0.0.1
  ip = ${?SERVER_IP}
  port = 7000
  port = ${?SERVER_PORT}
}

clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}

  port = 4000
  port = ${?CLUSTER_PORT}

  seed-ip = "localhost"
  seed-ip = ${?CLUSTER_SEED_IP}

  seed-port = 4000
  seed-port = ${?CLUSTER_SEED_PORT}

  seed-port_two = 4001
  seed-port_two = ${?CLUSTER_SEED_PORT_TWO}

  cluster.name = "mySystem"
}